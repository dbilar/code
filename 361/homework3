Page 286

3

template <class T>
void MaxHeap<T>::Push2(const T& e) {
	if(heapSize == capacity) {
		ChangeSize 1D(heap, capacity, 2*capacity);
		capacity *= 2;
	}
	
	int currentNode = ++heapSize;
	int h = floor(log(currentNode) / log(2));
	
	int start = 0;
	for(int size = h; size > 1; size /= 2) {
		if(heap[currentNode/pow(2, start + size/2)] < e) start += size/2;
	}
	for(int i = 0; i < start; ++i) {
		heap[currentNode] = heap[currentNode/2];
		currentNode /= 2;
	}
}	

Page 296

3

template <class K, class V>
void BSTInsertPair(BSTNode*& root, const  Pair<K, V>& e) {
	if(!root) root = new BSTNode(e);
	else if(e.first == root->data.first) root->data.second = e.second;
	else if(e.first < root->data.first) {
		BSTInsertPair(root->leftChild, e);
		(root->leftSize)++;
	}
	else BSTInsertPair(root->rightChild, e);
}

8

Initializing a binary tree with n pairs is analogous to sorting n pairs, since comparisons are used to insert the pairs into the correct place in the tree.  Therefore the complexity must be O(nlogn).

Problem 3

Node* KthSmallestElement(Node* a, Node* b, int k) {
	int leftnodesa = a ? a->leftSize : 0, leftnodesb = b ? b->leftSize : 0;
	while(leftnodesa + leftnodesb != k) {
		while(leftnodesa + leftnodesb > k) {
			if(!a) {
				b = b->leftChild;
				leftnodesb -= b->rightSize + 1;	
			}
			else if(!b) {
				a = a->leftChild;
				leftnodesa -= a->rightSize + 1;	
			}
			else if(a->data > b->data) {
				a = a->leftChild;
				leftnodesa -= a->rightSize + 1;	
			}
			else {
				b = b->leftChild;
				leftnodesb -= b->rightSize + 1;		
			}
		}
		while(leftnodesa + leftnodesb < k) {
			if(!a) { 
				b = b->rightChild;
				++leftnodesb;
			}
			else if(!b) {
				a = a->rightChild;
				++leftnodesa;
			}
			else if(a->data > b->data) {
				a = a->rightChild;
				++leftnodesa;
			}
			else {
				b = b->rightChild;
				++leftnodesb;
			}
		}
	}
	return a->leftChild->data > b->leftChild->data ? a->leftChild : b->leftChild;
}
